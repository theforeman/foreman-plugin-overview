#!/usr/bin/env python3

import argparse
import json

from dataclasses import asdict
from fpo import load_config, Entry

def markdown_link(label, url):
    return f'[{label}]({url})' if url else '—'

def markdown_links(urls):
    if urls:
        return ', '.join([markdown_link(label, url) for (label, url) in urls])
    else:
        return '—'


def print_markdown_table(entries, i18n=True):
    headers = ['Name', 'Team', 'Installer', 'RPM', 'deb', 'Tests', 'Issues']
    if i18n:
        headers.append('I18n')

    rows = []
    for entry in entries:
        row = [
            markdown_link(entry.short_name, entry.url),
            markdown_link('team', entry.github_team_url),
            "✅" if entry.installer else "❌",
            markdown_link('RPM', entry.rpm_url),
            markdown_link('deb', entry.deb_url),
            markdown_links(entry.test_urls),
            markdown_link('Issues', entry.issues_url),
        ]
        if i18n:
            row.append(markdown_link('i18n', entry.translations))
        rows.append(row)

    print(f'| {" | ".join(headers)} |')
    print(f'|{"|".join("-" * len(headers))}|')
    for columns in rows:
        print(f'| {" | ".join(columns)} |')
    print()


def render_markdown(data):
    print('# [CLI](https://github.com/theforeman/hammer-cli)')
    print('## Plugins')
    print_markdown_table(data['cli']['plugins'])

    print('# [Foreman](https://github.com/theforeman/foreman)')
    print('## Plugins')
    print_markdown_table(data['foreman']['plugins'])

    print('# [Foreman Proxy](https://github.com/theforeman/smart-proxy)')

    print('## Modules')
    print_markdown_table(data['smart_proxy']['modules'], i18n=False)

    print('## Providers')
    print_markdown_table(data['smart_proxy']['providers'], i18n=False)

    print('# [Foreman Installer](https://github.com/theforeman/foreman-installer)')
    print('## Modules')
    for puppet_module in data['installer']['modules']:
        line = ''
        for badge in puppet_module.ci_badges:
            line += f'{badge} '
        line += f'{markdown_link(puppet_module.short_name, puppet_module.url)}'

        print(f'* {line}')
    print()

    print('# Libraries')
    print_markdown_table(data['libraries'], i18n=False)

    print('# Client')
    print_markdown_table(data['client'], i18n=False)

    print('# Auxiliary repositories')
    for repository in data['auxiliary']:
        print(f'* [{repository.short_name}]({repository.url}) {repository.description}')


def render_json(data):
    def default_func(value):
        if isinstance(value, Entry):
            return asdict(value)
        return None

    print(json.dumps(data, default=default_func))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--filename', '-f', default='config.yaml', type=argparse.FileType())
    parser.add_argument('mode', choices=('json', 'markdown'))

    args = parser.parse_args()
    data = load_config(args.filename)

    if args.mode == 'json':
        render_json(data)
    elif args.mode == 'markdown':
        render_markdown(data)

if __name__ == '__main__':
    main()
